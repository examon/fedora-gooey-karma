#!/usr/bin/python2 -tt
# -*- coding:  utf-8 -*-

#    Fedora Gooey Karma prototype
#    based on the https://github.com/mkrizek/fedora-gooey-karma
#
#    Copyright (C) 2013
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    Author: Branislav Blaskovic <branislav@blaskovic.sk>
#    Author: Tomas Meszaros <exo@tty.sk>

import os
import sys

sys.path.append(os.path.join(os.path.dirname(sys.argv[0]), '../share/fedora-gooey-karma'))

import webbrowser
import Queue
import rpm
from fedora.client import AuthError
from fedora.client import ServerError
from fedora.client.bodhi import BodhiClient
from PySide import QtCore
from PySide import QtGui

from customgui import CustomTreeWidgetItem
from mainwindow_gui import Ui_MainWindow
from packagesworker import PackagesWorker
from bodhiworker import BodhiWorker
from config import Config


class MainWindow(QtGui.QMainWindow):

    __BUGZILLA_REDHAT_URL = "http://bugzilla.redhat.com/show_bug.cgi?id="
    __PACKAGE_INFO_URL = "https://apps.fedoraproject.org/packages/"
    __FEDORAPEOPLE_TESTCASE_URL = "https://fedoraproject.org/wiki/QA:Testcase_"
    __KOJI_PACKAGES_URL = "http://kojipkgs.fedoraproject.org//packages/"
    __FEDORA_RELEASES = [ 'Fedora 19', 'Fedora 18', 'Fedora 17' ]
    __BODHI_WORKERS_COUNT = 15

    def __init__(self, parent=None):
        # GUI
        super(MainWindow, self).__init__(parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        qr = self.frameGeometry()
        cp = QtGui.QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

        # Holders of data
        self.__installed_packages = {}
        self.__installed_updates = {}
        self.__available_updates = {}

        # Config
        self.config = Config()
        self.config.load_config()

        # Prepare Queues
        self.bodhi_workers_queue = Queue.Queue()
        self.pkg_worker_queue = Queue.Queue()

        # Prepare ui
        self.rpmTS = rpm.TransactionSet()
        self.__load_and_set_fedora_releases()
        self.ui.tabWidget.setCurrentIndex(0)
        self.ui.tabWidget_side.setCurrentIndex(0)
        self.ui.toolBoxWhatToTest.setCurrentIndex(0)
        self.ui.karmaUsernameEdit.setVisible(False)
        self.__update_favorite_ignored_pkg_lists()

        # TabBar - remove package's tabs and save it for later use
        self.__tabBar_info_backup = None
        self.__remove_package_tabs()

        # Connects
        ## Top main menu
        self.ui.actionQuit.triggered.connect(QtCore.QCoreApplication.instance().quit)
        self.ui.actionAbout.triggered.connect(self.__show_message_box_about)
        ## Misc connects
        self.ui.pkgList.currentItemChanged.connect(self.__show_package_detail)
        self.ui.searchEdit.textChanged.connect(self.__populate_pkgList)
        self.ui.installedBtn.clicked.connect(self.__show_installed)
        self.ui.availableBtn.clicked.connect(self.__show_available)
        self.ui.loadPackagesBtn.clicked.connect(self.__start_pkg_worker)
        self.ui.treeWidget_bugs.itemDoubleClicked.connect(self.__show_bug_in_browser)
        self.ui.treeWidget_related_packages.itemDoubleClicked.connect(self.__show_relevant_pkg_in_browser)
        self.ui.treeWidget_test_cases.itemDoubleClicked.connect(self.__show_testcase_in_browser)
        self.ui.karmaCheckBox.stateChanged.connect(self.__populate_pkgList)
        self.ui.karmaUsernameEdit.textChanged.connect(self.__populate_pkgList)
        self.ui.sendBtn.clicked.connect(self.__send_comment)
        ## Package settings
        self.ui.pkg_settings_open_bodhi_update.clicked.connect(self.__show_bodhi_update_in_browser)
        self.ui.pkg_settings_download_source_rpm.clicked.connect(self.__download_source_rpm)
        ## What to test toolbox
        self.ui.tool_pkg_list_negative.itemClicked.connect(self.__negative_karma_clicked)
        self.ui.tool_pkg_list_favorite.itemClicked.connect(self.__favorite_item_clicked)
        self.ui.toolBoxWhatToTest.currentChanged.connect(self.__move_toolbox_buttons)
        self.ui.btn_tool_add_pkg.clicked.connect(self.__config_add_package)
        self.ui.btn_tool_remove_pkg.clicked.connect(self.__config_remove_package)

        # Start Bodhi workers
        self.bodhi_workers = []
        for i in range(self.__BODHI_WORKERS_COUNT):
            b = BodhiWorker("bodhi_worker" + str(i), self.bodhi_workers_queue)
            b.bodhi_query_done.connect(self.__bodhi_process_result)
            b.start()
            self.bodhi_workers.append(b)

        # Start package worker
        self.pkg_worker = PackagesWorker(self.pkg_worker_queue, self.bodhi_workers_queue, self.__BODHI_WORKERS_COUNT)
        self.pkg_worker.set_installed_packages.connect(self.__set_installed_packages)
        self.pkg_worker.start()

        # Pkg worker threads
        self.pkg_worker.load_installed_packages_done.connect(self.__save_installed_pkg_list)
        self.pkg_worker.load_installed_packages_start.connect(self.__installed_pkg_list_loading_info)

    def __toolbox_current_tab(self):
        # What is the currently selected toolbox?
        if self.ui.toolBoxWhatToTest.currentIndex() == self.ui.toolBoxWhatToTest.count() -1:
            return 'ignored'
        else:
            return 'favorite'

    def __config_remove_package(self):
        # Removes selected package
        if self.__toolbox_current_tab() == 'ignored':
            try:
                self.config.ignored_packages.remove_package(self.ui.tool_pkg_list_ignored.currentItem().text(0))
            except:
                pass
        else:
            try:
                self.config.favorited_packages.remove_package(self.ui.tool_pkg_list_favorite.currentItem().text(0))
            except:
                pass
        self.config.save_config()
        self.__update_favorite_ignored_pkg_lists()

    def __config_add_package(self):
        # Add package from lineedit to config according to selected toolbox
        if self.__toolbox_current_tab() == 'ignored':
            self.config.ignored_packages.add_package(self.ui.tool_pkg_name.text())
        else:
            self.config.favorited_packages.add_package(self.ui.tool_pkg_name.text())
        self.__update_favorite_ignored_pkg_lists()
        self.ui.tool_pkg_name.clear()
        self.config.save_config()

    def __update_favorite_ignored_pkg_lists(self):
        self.ui.tool_pkg_list_ignored.clear()
        self.ui.tool_pkg_list_favorite.clear()

        # Prepare list of package names
        pkg_names = []
        for key in self.__installed_updates.keys():
            pkg_names.append(self.__installed_updates[key].parsed_nvr['name'])

        # Top level items
        def create_top_level_item(text, widget):
            item = QtGui.QTreeWidgetItem()
            item.setText(0, text)
            widget.insertTopLevelItem(0, item)
            item.setExpanded(True)
            return item

        # Top level items
        ## Set names
        fav_not_available = create_top_level_item('Bodhi update not available', self.ui.tool_pkg_list_favorite)
        fav_available = create_top_level_item('Bodhi update available', self.ui.tool_pkg_list_favorite)

        # Favorite packages
        for pkg in self.config.favorited_packages:
            item = QtGui.QTreeWidgetItem()
            item.setText(0, pkg)
            # If this package name is in available packages
            if pkg in pkg_names:
                fav_available.addChild(item)
            else:
                fav_not_available.addChild(item)

        # Ignored packages
        for pkg in self.config.ignored_packages:
            item = QtGui.QTreeWidgetItem()
            item.setText(0, pkg)
            self.ui.tool_pkg_list_ignored.insertTopLevelItem(0, item)


    def __move_toolbox_buttons(self, index):
        ## Copy widget with pkg list tools to current index one
        if self.__toolbox_current_tab() == 'ignored':
            self.ui.toolBoxIgnoredLayout.addWidget(self.ui.tool_add_remove_pkg)
        else:
            self.ui.toolBoxFavoriteLayout.addWidget(self.ui.tool_add_remove_pkg)

    def __remove_package_tabs(self):
        if self.__tabBar_info_backup is None:
            self.__tabBar_info_backup = self.ui.tabWidget.widget(1)
        self.ui.tabWidget.removeTab(1)

    def __show_message_box_about(self):
        text = (
            "<b>Fedora Gooey Karma</b> is a tool for browsing installed packages from updates-testing repository.<br><br>"
            "You can easily add karma comment, open bugs attached to new build and more.<br><br>"
            "<b>Authors:</b><br>"
            "<ul><li>Branislav Blaskovic</li><li>Tomas Meszaros</li></ul>"
        )
        QtGui.QMessageBox.about(QtGui.QApplication.activeWindow(), "Fedora Gooey Karma", text)

    def __add_status_item(self, item):
        self.ui.statusList.insertItem(0, str(item))

    def __bodhi_process_result(self, result):
        variant, data = result

        # We've got one bodhi update of installed package, add it to pkg list
        if variant == 'installed':
            self.__installed_updates[data['itemlist_name']] = data
            self.__add_status_item(data['itemlist_name'] + " is installed")

            if self.ui.installedBtn.isChecked():
                # Is this package in list?
                # If yes, remove it to add it again
                for i in range(self.ui.pkgList.count()):
                    item = self.ui.pkgList.item(i)
                    if item.text() == data['itemlist_name']:
                        self.ui.pkgList.takeItem(i)
                        self.ui.pkgList.removeItemWidget(item)
                        break

                # Add update to list if it match filters
                if self.__update_can_be_shown(data):
                    self.ui.pkgList.addItem(data['itemlist_name'])

        # We've got available package update, save it
        elif variant == 'available':
            self.__available_updates[data['itemlist_name']] = data
            self.__add_status_item(data['itemlist_name'] + " can be updated")

            if self.ui.availableBtn.isChecked():
                # Is this package in list?
                # If yes, remove it to add it again
                for i in range(self.ui.pkgList.count()):
                    item = self.ui.pkgList.item(i)
                    if item.text() == data['itemlist_name']:
                        self.ui.pkgList.takeItem(i)
                        self.ui.pkgList.removeItemWidget(item)
                        break

                # Add update to list if it match filters
                if self.__update_can_be_shown(data):
                    self.ui.pkgList.addItem(data['itemlist_name'])

        # Prepare What to test section
        if variant in ['installed', 'available']:
            # Negative karma
            update_item = None
            for comment in data['formatted_comments']:
                #  If we've got negative karma, show this update in list
                if comment['karma'] == -1:
                    # Prepare line with update itself
                    if  update_item is None:
                        update_item = QtGui.QTreeWidgetItem()
                        update_item.setText(0, str(data['itemlist_name']))
                        self.ui.tool_pkg_list_negative.insertTopLevelItem(0, update_item)
                        update_item.setExpanded(True)

                    # Add comment as child to update
                    line = QtGui.QTreeWidgetItem()
                    line.setText(0, str(comment['text']))
                    update_item.insertChild(0, line)

            # If it is in favorited packages, update list
            if data['parsed_nvr']['name'] in self.config.favorited_packages:
                self.__update_favorite_ignored_pkg_lists()

    def __set_installed_packages(self, packages):
        self.__add_status_item(str(len(packages)) + " installed packages on system")
        for pkg in packages:
            self.__installed_packages[pkg.nvr] = pkg
        #self.__installed_packages = packages

    def __load_and_set_fedora_releases(self):
        # Load fedora-release version
        packages = self.rpmTS.dbMatch('name', 'fedora-release')
        for package in packages:
            break

        # Fill in current release as first
        self.ui.releaseComboBox.addItem('Fedora ' + str(package['version']))

        # Fill combo box
        for release in self.__FEDORA_RELEASES:
            # Skip current release
            if package['version'] == release.split()[-1]:
                continue

            self.ui.releaseComboBox.addItem(release)

    def __start_pkg_worker(self):
        # Get release and put it to queue
        # Package worker will get info about it
        self.ui.loadPackagesBtn.setText('Loading packages')
        releasever = self.ui.releaseComboBox.currentText().split()[-1]
        self.pkg_worker_queue.put([releasever, self.ui.maxDays.value()])

    def __available_pkg_list_loading_info(self):
        release = self.ui.releaseComboBox.currentText()
        message = "Please wait... Loading all available packages. [%s]" % release
        self.ui.statusBar.showMessage(message)

    def __installed_pkg_list_loading_info(self):
        release = self.ui.releaseComboBox.currentText()
        message = "Please wait... Loading all installed packages. [%s]" % release
        self.ui.statusBar.showMessage(message)

    def __show_bug_in_browser(self):
        bug_id = self.ui.treeWidget_bugs.currentItem().text(0)
        webbrowser.open_new_tab("%s%s" % (self.__BUGZILLA_REDHAT_URL, bug_id))

    def __show_relevant_pkg_in_browser(self):
        widget = self.ui.treeWidget_related_packages.currentItem()
        if widget.parent() is not None:
            # Do not need to open new tab when double clicked at "Desktop packages"
            # or "Other packages", so affect childs only
            webbrowser.open_new_tab("%s%s" % (self.__PACKAGE_INFO_URL, widget.text(0).strip()))

    def __show_bodhi_update_in_browser(self):
        update = self.__get_bodhi_update()
        if not update:
            return
        webbrowser.open_new_tab(update['bodhi_url'])

    def __download_source_rpm(self):
        update = self.__get_bodhi_update()
        if not update:
            return

        name = update['parsed_nvr']['name']
        version = update['parsed_nvr']['version']
        release = update['parsed_nvr']['release']

        # Set-up url
        url = self.__KOJI_PACKAGES_URL + "%s/%s/%s/src/%s.src.rpm" % (name, version, release, update['itemlist_name'])
        # Maybe it would be nice to show Save dialog and save directly to hdd
        webbrowser.open_new_tab(url)

    def __show_testcase_in_browser(self):
        testcase_name = self.ui.treeWidget_test_cases.currentItem().text(0).replace(' ', '_')
        webbrowser.open_new_tab("%s%s" % (self.__FEDORAPEOPLE_TESTCASE_URL, testcase_name))

    def __save_installed_pkg_list(self, pkg_object):
        message = "All installed packages has been loaded. [Fedora %s]" % pkg_object
        self.ui.statusBar.showMessage(message)
        self.ui.loadPackagesBtn.setText('Reload packages')

    def __favorite_item_clicked(self, item, column):
        # Get package name
        # Do this only when package is selected (not the header text)
        if item.parent() is not None:
            self.ui.searchEdit.setText(str(item.text(0)))

    def __negative_karma_clicked(self, item, column):
        # Get package name even if comment selected
        if item.parent() is not None:
            item = item.parent()

        # Set package name as search text
        self.ui.searchEdit.setText(str(item.text(0)))

    def __set_search_text(self, text):
        self.ui.searchEdit.setText(str(text))

    def __decode_dict(self, dictionary, decoding='utf-8', data_type=str):
        for key in dictionary:
            if isinstance(dictionary[key], data_type):
                dictionary[key] = dictionary[key].decode(decoding)

    def __send_comment(self):
        comment = self.ui.commentEdit.toPlainText()
        karma = self.ui.karmaBox.currentText()

        # Catch all problems
        if self.__selected_pkglist_item is None:
            message = "Comment not submitted: Could not get update from testing builds"
            self.__add_status_item(message)
            return
        if not self.ui.usernameEdit.text():
            message = "Please enter FAS username."
            self.__add_status_item(message)
            return
        if not self.ui.passwordEdit.text():
            message = "Please enter FAS password."
            self.__add_status_item(message)
            return

        # Prepare message for Bodhi system
        bc = BodhiClient()
        bc.username = self.ui.usernameEdit.text()
        bc.password = self.ui.passwordEdit.text()

        message = "Processing... Wait please..."
        self.__add_status_item(message)

        # Try send it 3 times if ServerError occours
        for retry in range(3):
            try:
                # Send comment to bodhi
                bc.comment(self.__selected_pkglist_item["title"], comment, karma=karma)
                message = "Comment submitted successfully."
                message2 = ("Reloading bodhi update for "
                           + str(self.__selected_pkglist_item['itemlist_name']) + "...")
                self.__add_status_item(message)
                self.__add_status_item(message2)

                # Reload bodhi update
                self.bodhi_workers_queue.put(['package_update', self.__selected_pkglist_item['yum_package']])
                self.ui.commentEdit.clear()
                return
            except AuthError:
                message = "Invalid username or password. Please try again."
                self.__add_status_item(message)
                break
            except ServerError, e:
                message = "Server error %s" % str(e)
                self.__add_status_item(message)

    def __update_can_be_shown(self, update):
        # Update need to pass several criteria to appear in current pkg list
        ## Is this pkg list for him?
        if self.ui.installedBtn.isChecked():
            if update['itemlist_name'] not in self.__installed_updates:
                return False
        elif self.ui.availableBtn.isChecked():
            if update['itemlist_name'] not in self.__available_updates:
                return False

        ## Does this update match search text?
        if len(self.ui.searchEdit.text()) > 0:
            if self.ui.searchEdit.text() not in update['itemlist_name']:
                return False

        ## Karma submitted filter
        karma_username = self.ui.karmaUsernameEdit.text()
        if self.ui.karmaCheckBox.isChecked():
            for comment in update['formatted_comments']:
                if comment['author'] == karma_username:
                    return False

        return True

    def __populate_pkgList(self):
        self.ui.pkgList.clear()

        # Prepare data which we want to show
        if self.ui.installedBtn.isChecked():
            pkgList = self.__installed_updates
        elif self.ui.availableBtn.isChecked():
            pkgList = self.__available_updates

        # Loop packages
        for key in pkgList.keys():
            update = pkgList[key]

            # Can this be shown? Send it to filters!
            if not self.__update_can_be_shown(update):
                continue

            self.ui.pkgList.addItem(update['itemlist_name'])

    def __show_installed(self):
        # Show installed packages which are from testing repo
        self.ui.availableBtn.setChecked(False)
        self.ui.installedBtn.setChecked(True)
        self.__populate_pkgList()

    def __show_available(self):
        # Show packages available to update
        self.ui.installedBtn.setChecked(False)
        self.ui.availableBtn.setChecked(True)
        self.__populate_pkgList()

    def __get_bodhi_update(self, pkg=None):
        # Get bodhi update according to selected package in pkg list
        if self.ui.installedBtn.isChecked():
            pkgList = self.__installed_updates
        elif self.ui.availableBtn.isChecked():
            pkgList = self.__available_updates
        else:
            return

        if pkg == None:
            return pkgList[self.ui.pkgList.currentItem().text()]
        else:
            return pkgList[pkg]


    def __show_package_detail(self, pkg_item):
        if pkg_item is None:
            return

        text_browser_string = ""

        bodhi_update = self.__get_bodhi_update()

        if bodhi_update is None:
            return

        self.__selected_pkglist_item = bodhi_update

        # Show tab if not here
        self.ui.tabWidget.addTab(self.__tabBar_info_backup, 'Update: ' + bodhi_update['itemlist_name'])

        # Switch tabs to info tab
        self.ui.tabWidget.setCurrentIndex(1)

        ## title
        self.ui.pkgNameLabel.setText(bodhi_update['itemlist_name'])

        # Fill in toolbox Add package line edit
        self.ui.tool_pkg_name.setText(bodhi_update['parsed_nvr']['name'])

        ## yum info
        yum_values = {}
        yum_format_string = (
            "<b>Yum Info %(installed_version)s</b>\n"
            "<b>           Name:</b> %(name)s\n"
            "<b>           Arch:</b> %(arch)s\n"
            "<b>        Version:</b> %(version)s\n"
            "<b>        Release:</b> %(release)s\n"
            "<b>           Size:</b> %(size)s\n"
            "<b>           Repo:</b> %(repo)s\n"
            "<b>      From repo:</b> %(from_repo)s\n"
            "<b>        Summary:</b> %(summary)s\n"
            "<b>            URL:</b> %(url)s\n"
            "<b>        License:</b> %(license)s\n\n"
            "\n\n"
        )

        # Grab yum info from installed package
        if bodhi_update.variant == 'installed':
            yum_pkg = bodhi_update.yum_package
        elif bodhi_update.variant == 'available':
            # Search for package
            for key in self.__installed_packages.keys():
                if self.__installed_packages[key].name == bodhi_update.yum_package.name:
                    yum_pkg = self.__installed_packages[key]
                    break
        else:
            yum_pkg = None

        if yum_pkg is not None:
            # If we got yum package
            # fetch info from yum_pkg
            yum_values['name'] = yum_pkg.name
            yum_values['arch'] = yum_pkg.arch
            yum_values['version'] = yum_pkg.version
            yum_values['release'] = yum_pkg.release
            if yum_pkg.packagesize > 1e6:
                # It's better to display human readable number format
                # for the package size, e.g. 1 M (as does $ yum info)
                yum_values['size'] = "{:0.1f} M".format(round(yum_pkg.packagesize/1e6, 1))
            else:
                yum_values['size'] = "{:0.1f} k".format(round(yum_pkg.packagesize/1e3, 1))
            yum_values['repo'] = yum_pkg.repo
            yum_values['from_repo'] = yum_pkg.ui_from_repo
            yum_values['summary'] = yum_pkg.summary
            yum_values['url'] = yum_pkg.url
            yum_values['license'] = yum_pkg.license
            yum_values['description'] = yum_pkg.description
            yum_values['installed_version'] = ''
            if bodhi_update.variant == 'available':
                yum_values['installed_version'] = '(installed version)'
            # Decode all strings found in yum_values to utf-8
            self.__decode_dict(yum_values)
            # Map fetched yum info on the yum_format_string
            # Add to the final browser string
            text_browser_string += yum_format_string % yum_values

            ## Related packages
            self.ui.treeWidget_related_packages.clear()

            ### Others pkgs category
            item_others = QtGui.QTreeWidgetItem()
            item_others.setText(0, "Other packages")
            self.ui.treeWidget_related_packages.insertTopLevelItem(0, item_others)
            item_others.setExpanded(True)

            for key in bodhi_update['relevant_packages']['others'].keys():
                rel_pkg = bodhi_update['relevant_packages']['others'][key]
                pkg = QtGui.QTreeWidgetItem()
                pkg.setText(0, str(rel_pkg.name))
                pkg.setToolTip(0, rel_pkg.description)
                item_others.insertChild(0, pkg)

            ### Desktop pkgs category
            item_desktop = QtGui.QTreeWidgetItem()
            item_desktop.setText(0, "Desktop packages")
            self.ui.treeWidget_related_packages.insertTopLevelItem(0, item_desktop)
            item_desktop.setExpanded(True)

            for key in bodhi_update['relevant_packages']['desktop'].keys():
                rel_pkg = bodhi_update['relevant_packages']['desktop'][key]
                pkg = QtGui.QTreeWidgetItem()
                pkg.setText(0, str(rel_pkg.name))
                pkg.setToolTip(0, rel_pkg.description)
                item_desktop.insertChild(0, pkg)

        else:
            print "Not in installed packages"

        ## Bodhi info
        bodhi_values = {}
        bodhi_format_string = (
            "<b>Bodhi Info</b>\n"
            "<b>         Status:</b> %(status)s\n"
            "<b>        Release:</b> %(release)s\n"
            "<b>      Update ID:</b> %(updateid)s\n"
            "<b>         Builds:</b> %(builds)s"
            "<b>      Requested:</b> %(request)s\n"
            "<b>         Pushed:</b> %(pushed)s\n"
            "<b> Date Submitted:</b> %(date_submitted)s\n"
            "<b>  Date Released:</b> %(date_released)s\n"
            "<b>      Submitted:</b> %(submitter)s\n"
            "<b>          Karma:</b> %(karma)s\n"
            "<b>   Stable Karma:</b> %(stable_karma)s\n"
            "<b> Unstable Karma:</b> %(unstable_karma)s\n"
        )

        bodhi_values['status'] = bodhi_update['status']
        bodhi_values['release'] = bodhi_update['release']['long_name']
        bodhi_values['updateid'] = bodhi_update['updateid']
        builds_list = bodhi_update['builds']
        if len(builds_list):
            build_num = 0
            builds_string = ""
            for build_item in builds_list:
                if not build_num:
                    # First build name
                    builds_string += "%s\n" % build_item['nvr']
                else:
                    # Second and next builds
                    builds_string += "%s%s\n" % (17 * " ", build_item['nvr'])
                build_num += 1
            bodhi_values['builds'] = builds_string
        else:
            bodhi_values['builds'] = "None"
        bodhi_values['request'] = bodhi_update['request']
        bodhi_values['pushed'] = "True" if bodhi_update['date_pushed'] else "False"
        bodhi_values['date_submitted'] = bodhi_update['date_submitted']
        bodhi_values['date_released'] = bodhi_update['date_pushed']
        bodhi_values['submitter'] = bodhi_update['submitter']
        bodhi_values['karma'] = bodhi_update['karma']
        bodhi_values['stable_karma'] = bodhi_update['stable_karma']
        bodhi_values['unstable_karma'] = bodhi_update['unstable_karma']
        bodhi_values['notes'] = bodhi_update['notes']
        bodhi_values['bodhi_url'] = bodhi_update['bodhi_url']
        # Decode all strings found in bodhi_values to utf-8
        self.__decode_dict(bodhi_values)
        # Map fetched bodhi info on the bodhi_format_string
        # Add to the final browser string
        text_browser_string += bodhi_format_string % bodhi_values

        # First descriptions
        descriptions_values = {}
        descriptions_values['yum_description'] = yum_values['description']
        descriptions_values['bodhi_notes'] = bodhi_values['notes']
        text_browser_descriptions = (
            "<b>Yum description</b></pre>"
            "%(yum_description)s<pre>\n\n"
            "<b>Bodhi update notes</b></pre>"
            "%(bodhi_notes)s<pre>\n\n"
        )
        text_browser_desc_string = text_browser_descriptions % descriptions_values

        # Set final browser string text
        self.ui.textBrowser.setHtml('<pre>' + text_browser_desc_string + text_browser_string + '</pre>')

        ## Bugs
        self.ui.treeWidget_bugs.clear()
        if bodhi_update['bugs_by_id']:
            for key in bodhi_update['bugs_by_id']:
                bug = QtGui.QTreeWidgetItem()
                bug.setText(0, str(key))
                bug.setText(1, str(bodhi_update['bugs_by_id'][key].encode('utf-8')))
                self.ui.treeWidget_bugs.insertTopLevelItem(0, bug)

        ## Test cases
        self.ui.treeWidget_test_cases.clear()
        test_cases_list = bodhi_update['test_cases']
        if len(test_cases_list):
            for test_case_item in reversed(test_cases_list):
                tc = QtGui.QTreeWidgetItem()
                tc.setText(0, str(test_case_item))
                self.ui.treeWidget_test_cases.insertTopLevelItem(0, tc)

        ## Feedback
        self.ui.treeWidget_feedback.clear()
        comments = bodhi_update['formatted_comments']

        ## Prepare brushes
        green_brush = QtGui.QBrush(QtCore.Qt.darkGreen)
        red_brush = QtGui.QBrush(QtCore.Qt.red)

        ## Load comments
        if comments:
            for i in comments:
                comment = CustomTreeWidgetItem()
                comment_font = comment.font(1)

                # Set color and font weight for karma
                if i['karma'] == 1:
                    comment.setForeground(1, green_brush)
                    comment_font.setBold(True)
                if i['karma'] == -1:
                    comment.setForeground(1, red_brush)
                    comment_font.setBold(True)

                # Set font
                comment.setFont(1, comment_font)
                # Set vertical alignment to Top
                comment.setTextAlignment(0, QtCore.Qt.AlignTop)
                comment.setTextAlignment(1, QtCore.Qt.AlignTop)
                comment.setTextAlignment(2, QtCore.Qt.AlignTop)
                comment.setTextAlignment(3, QtCore.Qt.AlignTop)
                # Fill it with text
                comment.setText(0, str(i['ord']))
                comment.setText(1, str(i['karma']))
                comment.setText(2, i['author'])
                comment.setText(3, i['text'])
                comment.setToolTip(3, i['text'])
                self.ui.treeWidget_feedback.insertTopLevelItem(0, comment)

    def exit_threads(self):
        # Try to properly exit threads
        # This still need work
        if not self.pkg_worker.isRunning():
            self.pkg_worker.exit()

        for i in range(self.__BODHI_WORKERS_COUNT):
            if not self.bodhi_workers[i].isRunning():
                self.bodhi_workers[i].exit()

def main():
    app = QtGui.QApplication(sys.argv)
    win = MainWindow()
    win.show()
    ret = app.exec_()
    win.exit_threads()
    sys.exit(ret)

if __name__ == "__main__":
    main()

# vim: set expandtab ts=4 sts=4 sw=4 :
